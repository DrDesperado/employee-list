{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Employee } from '../employee';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/employee.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction UpdateEmployeeComponent_div_7_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" \\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043F\\u0443\\u0441\\u0442\\u044B\\u043C \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateEmployeeComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, UpdateEmployeeComponent_div_7_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.form.get(\"firstName\")) == null ? null : tmp_0_0.hasError(\"required\"));\n  }\n}\nfunction UpdateEmployeeComponent_div_12_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" \\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043F\\u0443\\u0441\\u0442\\u044B\\u043C \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateEmployeeComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, UpdateEmployeeComponent_div_12_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.form.get(\"lastName\")) == null ? null : tmp_0_0.hasError(\"required\"));\n  }\n}\nfunction UpdateEmployeeComponent_div_17_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" \\u041F\\u043E\\u043B\\u0435 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043F\\u0443\\u0441\\u0442\\u044B\\u043C \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateEmployeeComponent_div_17_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \" \\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0442\\u043D\\u044B\\u0439 email \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateEmployeeComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, UpdateEmployeeComponent_div_17_small_1_Template, 2, 0, \"small\", 9);\n    i0.ɵɵtemplate(2, UpdateEmployeeComponent_div_17_small_2_Template, 2, 0, \"small\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.form.get(\"emailId\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r2.form.get(\"emailId\")) == null ? null : tmp_1_0.hasError(\"email\"));\n  }\n}\nexport class UpdateEmployeeComponent {\n  constructor(employeeService, formBuilder, route, router) {\n    this.employeeService = employeeService;\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.employee = new Employee();\n  }\n  ngOnInit() {\n    this.form = new FormGroup({\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required),\n      emailId: new FormControl('', [Validators.email, Validators.required])\n    });\n    this.id = this.route.snapshot.params['id'];\n    this.employeeService.getEmployeeById(this.id).subscribe(data => {\n      this.employee = data;\n      console.log(this.employee);\n      this.form.setControl('firstName', this.formBuilder.control(data.firstName, [Validators.required]));\n      this.form.setControl('lastName', this.formBuilder.control(data.lastName, [Validators.required]));\n      this.form.setControl('emailId', this.formBuilder.control(data.emailId, [Validators.required, Validators.email]));\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      const formData = {\n        ...this.form.value\n      };\n      this.employeeService.updateEmployee(this.id, formData).subscribe(data => {\n        console.log('Updated employee', data);\n        this.router.navigate(['/employees']);\n      }, error => console.log(error));\n    }\n  }\n}\nUpdateEmployeeComponent.ɵfac = function UpdateEmployeeComponent_Factory(t) {\n  return new (t || UpdateEmployeeComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n};\nUpdateEmployeeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateEmployeeComponent,\n  selectors: [[\"app-update-employee\"]],\n  decls: 20,\n  vars: 5,\n  consts: [[1, \"text-center\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"text\", \"id\", \"firstName\", \"formControlName\", \"firstName\", \"name\", \"firstName\", 1, \"form-control\"], [\"class\", \"validation\", 4, \"ngIf\"], [\"type\", \"text\", \"id\", \"lastName\", \"formControlName\", \"lastName\", \"name\", \"lastName\", 1, \"form-control\"], [\"type\", \"email\", \"id\", \"emailId\", \"formControlName\", \"emailId\", \"name\", \"emailId\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"validation\"], [4, \"ngIf\"]],\n  template: function UpdateEmployeeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Update Employee\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateEmployeeComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"label\");\n      i0.ɵɵtext(5, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtemplate(7, UpdateEmployeeComponent_div_7_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\");\n      i0.ɵɵtext(10, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵtemplate(12, UpdateEmployeeComponent_div_12_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\");\n      i0.ɵɵtext(15, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 6);\n      i0.ɵɵtemplate(17, UpdateEmployeeComponent_div_17_Template, 3, 2, \"div\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"button\", 7);\n      i0.ɵɵtext(19, \" Update \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.form.get(\"firstName\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.form.get(\"firstName\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.form.get(\"lastName\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.form.get(\"lastName\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.form.get(\"emailId\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.form.get(\"emailId\")) == null ? null : tmp_3_0.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"p[_ngcontent-%COMP%] {\\n  font-style: 1.5rem;\\n}\\n\\ninput.ng-invalid.ng-touched[_ngcontent-%COMP%] {\\n  border: 1px solid red;\\n}\\ninput.ng-valid.ng-touched[_ngcontent-%COMP%] {\\n  border: 1px solid green;\\n}\\n/*# sourceURL=webpack://./src/app/update-employee/update-employee.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdXBkYXRlLWVtcGxveWVlL3VwZGF0ZS1lbXBsb3llZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0FBQ0o7O0FBR0k7RUFDSSxxQkFBQTtBQUFSO0FBRUk7RUFDSSx1QkFBQTtBQUFSIiwic291cmNlc0NvbnRlbnQiOlsicCB7XG4gIGZvbnQtc3R5bGU6IDEuNXJlbTtcbn1cblxuaW5wdXQubmctaW52YWxpZC5uZy10b3VjaGVkIHtcbiAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xufVxuaW5wdXQubmctdmFsaWQubmctdG91Y2hlZCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyZWVuO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Employee","i0","UpdateEmployeeComponent","constructor","employeeService","formBuilder","route","router","ngOnInit","form","firstName","required","lastName","emailId","email","id","snapshot","params","getEmployeeById","subscribe","data","employee","console","log","setControl","control","onSubmit","valid","formData","value","updateEmployee","navigate","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/drdesperado/Documents/projects/Employees/employee/frontend/src/app/update-employee/update-employee.component.ts","/home/drdesperado/Documents/projects/Employees/employee/frontend/src/app/update-employee/update-employee.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  Validators,\n  FormBuilder,\n} from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { __values } from 'tslib';\nimport { Employee } from '../employee';\nimport { EmployeeListComponent } from '../employee-list/employee-list.component';\nimport { EmployeeService } from '../services/employee.service';\n\n@Component({\n  selector: 'app-update-employee',\n  templateUrl: './update-employee.component.html',\n  styleUrls: ['./update-employee.component.scss'],\n})\nexport class UpdateEmployeeComponent implements OnInit {\n  form: FormGroup;\n  id: number;\n  employee: Employee = new Employee();\n\n  constructor(\n    private employeeService: EmployeeService,\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required),\n      emailId: new FormControl('', [Validators.email, Validators.required]),\n    });\n    this.id = this.route.snapshot.params['id'];\n    this.employeeService.getEmployeeById(this.id).subscribe((data) => {\n      this.employee = data;\n      console.log(this.employee);\n\n      this.form.setControl(\n        'firstName',\n        this.formBuilder.control(data.firstName, [Validators.required])\n      );\n      this.form.setControl(\n        'lastName',\n        this.formBuilder.control(data.lastName, [Validators.required])\n      );\n      this.form.setControl(\n        'emailId',\n        this.formBuilder.control(data.emailId, [\n          Validators.required,\n          Validators.email,\n        ])\n      );\n    });\n  }\n\n  onSubmit() {\n    if (this.form.valid) {\n      const formData = { ...this.form.value };\n      this.employeeService.updateEmployee(this.id, formData).subscribe(\n        data => {\n          console.log('Updated employee', data);\n          this.router.navigate(['/employees'])\n        },\n        (error) => console.log(error)\n      );\n    }\n  }\n}\n","<h3 class=\"text-center\">Update Employee</h3>\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <div class=\"form-group\">\n    <label>First Name</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"firstName\"\n      formControlName=\"firstName\"\n      name=\"firstName\"\n    />\n    <div\n      *ngIf=\"form.get('firstName')?.invalid && form.get('firstName')?.touched\"\n      class=\"validation\"\n    >\n      <small *ngIf=\"form.get('firstName')?.hasError('required')\">\n        Поле не может быть пустым\n      </small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label>Last Name</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"lastName\"\n      formControlName=\"lastName\"\n      name=\"lastName\"\n    />\n    <div\n      *ngIf=\"form.get('lastName')?.invalid && form.get('lastName')?.touched\"\n      class=\"validation\"\n    >\n      <small *ngIf=\"form.get('lastName')?.hasError('required')\">\n        Поле не может быть пустым\n      </small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label>Email</label>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      id=\"emailId\"\n      formControlName=\"emailId\"\n      name=\"emailId\"\n    />\n    <div\n      *ngIf=\"form.get('emailId')?.invalid && form.get('emailId')?.touched\"\n      class=\"validation\"\n    >\n      <small *ngIf=\"form.get('emailId')?.hasError('required')\">\n        Поле не может быть пустым\n      </small>\n\n      <small *ngIf=\"form.get('emailId')?.hasError('email')\">\n        Введите корректный email\n      </small>\n    </div>\n  </div>\n\n  <button class=\"btn btn-success\" type=\"submit\" [disabled]=\"form.invalid\">\n    Update\n  </button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}